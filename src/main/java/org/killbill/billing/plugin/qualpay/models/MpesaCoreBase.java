package org.killbill.billing.plugin.qualpay.models;

import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.security.PublicKey;
import java.security.Security;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;

import javax.crypto.Cipher;

import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;

import org.apache.commons.codec.binary.Base64;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@JsonAutoDetect(getterVisibility= Visibility.DEFAULT,setterVisibility= Visibility.DEFAULT,fieldVisibility= Visibility.ANY)
@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(Include.NON_EMPTY)
public abstract  class MpesaCoreBase {

    /**
     * 
     * @param bizShortCode
     */

    public MpesaCoreBase( int bizShortCode) {
        this.BusinessShortCode = bizShortCode;

    
        this.timestamp = DateTimeFormat.forPattern("yyyyMMddhhmmss").print(DateTime.now());
        

        this.Passkey = APIResourceConstants.SecurityConstants.PASSKEY; //TODO: below

        String tempPassword = String.valueOf(BusinessShortCode) + Passkey+ timestamp;
    
        this.Password = encryptInitiatorPassword(tempPassword);
    }

    /**
     * asslong a s the password is the real one and certificate exist's in certifacatePath
     * this function will do the job even though there is room for improvements
     * @param certificatePath
     * @param passwodString
     * @return encrypted password
     */
    public String encryptInitiatorPassword(String passwodString){
        String encryptedPassword = ""; //YOUR_INITIATOR_PASSWORD
        byte [] input = passwodString.getBytes();

        try {
            Security.addProvider(new BouncyCastleProvider());
            
            ClassLoader cLoader = Thread.currentThread().getContextClassLoader();
            InputStream fInputStream = cLoader.getResourceAsStream(
                                    APIResourceConstants.SecurityConstants.MPESA_CERTIFICATE);
            
            CertificateFactory cFactory = CertificateFactory.getInstance("X.509");
            X509Certificate x509Cert = (X509Certificate)cFactory.generateCertificate(fInputStream);

            PublicKey pKey = x509Cert.getPublicKey();
            
            
            Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding", "BC");
            cipher.init(Cipher.ENCRYPT_MODE, pKey);
            byte [] encryptedBytes  = cipher.doFinal(input);

            encryptedPassword = Base64.encodeBase64String(encryptedBytes);

        } catch (Exception e) {
            //TODO: handle exception
            logger.error("was unable to encrypt the password from mpesa plugin: %s", e);
        }

        return encryptedPassword;
    }

    /**
     * the password for encrypting request. This is generated by Base64 encoding BusinessShortcode
     * Passkey and timeStamp
     * @return Base64 encoded password
     * TODO: error prone as this might not be was was really intended by Mpesa test alot pleasee....
     */
    public String setPassword(){
        String commbinedPassword = String.valueOf(BusinessShortCode) + Passkey + timestamp;
        byte[] combinedBytes = commbinedPassword.getBytes();
        return Base64.encodeBase64String(combinedBytes);
    }


    @JsonProperty("Password")
    public String Password;

    /**
     * TimeStamp of the transaction in the format 
     * {yyyyMMddhhmmss}
     * error might arise here due to date format about so test well
     */
    @JsonProperty("Timestamp")
    public String timestamp;
    

    @JsonProperty("BusinessShortCode")
    public int BusinessShortCode;

    /**
     * Passkey = bfb279f9aa9bdbcf158e97dd71a467cd2e0c893059b10f78e6b72ada1ed2c919
     * password Apitest425#
     */
    @JsonIgnore
    private String Passkey;

    private static final Logger logger = LoggerFactory.getLogger(MpesaCoreBase.class);


}

/**
 * {"Password":"aIRh7ef54ar8NF7KmtNDrqz/X+Guui2UyX7dL7f3rL9In96RluCn2Yva2cu38LWo62IwDY5hi32CkttLijfMIDyk
 * CzGOAT/h3j/PJ5pP6Q8Xha/r6xibE17I2Gz19eisfyIsMKpRssnWI+GSKuWFGCSMeyKcMjDUFaP/8Mv4WjjSSrOIZl1ztUGrzGGGRmp
 * qMpj7PO8USMGU0YcFruFH/zULaGUZDsU31C+tefjyf+kpxja0xKKx+HA8OG/B2hegBn6JTViijdkSvhEJygoKJFpIamD/0jC9i9D7T
 * CkaE1I9AWVrp/xcTXMKE7xQXl2svqFqMI2v7ZsyeIDqH/+BoA==",
 * "Timestamp":"20210629120851","BusinessShortCode":174379,"TransactionType":"CustomerPayBillOnline",
 * "Amount":50.0,"PartyA":"254725085687","PartyB":174379,"PhoneNumber":"254725085687",
 * "CallBackURL":"https://64.227.127.143:8080/plugin/callmeback","
 * AccountReference":"wiflixdaily","TransactionDesc":"movies subscription"}
 */